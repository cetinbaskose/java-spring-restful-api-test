## Exercises
### Exercise 1
Make the tests run green (there should be one failing test)
 Solution:
  1- Added static keyword counter variable to make it staying in scope for the entire life of the program.
   private static final AtomicLong counter = new AtomicLong()  
  2- List<Person> initialized via new Arraylist Constructor to make it mutable.
 	public static final    List<Person> PERSON_DATA = new ArrayList<Person>(Arrays.asList(new Person("Mary", "Smith"),
			new Person("Brian", "Archer"), new Person("Mary", "Brown"), new Person("Collin", "Brown")));


### Exercise 2
Update the existing `/person/{lastName}/{firstName}` endpoint to return an appropriate RESTful response when the requested person does not exist in the list
- prove your results
   Used findany to make it Optional for checking if value exists return that value or return null logic.
  
   .findAny().orElse(null);



### Exercise 3
Write a RESTful API endpoint to retrieve a list of all people with a particular surname
- pay attention to what should be returned when there are no match, one match, multiple matches
- prove your results

 3.1  Created findPersonBySurname returns list of person filtered by lastname.

	public List<Person> findPersonBySurname(String lastName) {
		return PERSON_DATA.stream().filter(p -> p.getLastName().equalsIgnoreCase(lastName))
				.collect(Collectors.toList());
	}

3.2 Created controller method
  @GetMapping("/personBySurname/{lastName}/")
    public List<Person> personBySurname(@PathVariable(value="lastName") String lastName) {
        return personDataService.findPersonBySurname(lastName);
     
    }
    
    Created Service test cases
        
    @Test
    public void shouldReturnEmptyListnWhenNotFoundBySurname()
    {
		List<Person> person = personDataService.findPersonBySurname("Peker");
    	
    	assertEquals(0,person.size() );
    	
    }
    
    
    @Test
    public void shouldReturnPersonListnWhenFoundBySurname()
    {
		List<Person> person = personDataService.findPersonBySurname("Smith");
    	
    	assertEquals(1,person.size() );
    	
    }
    
    @Test
    public void shouldReturnAllPersonListWhenFoundBySurname()
    {
		List<Person> person = personDataService.findPersonBySurname("Brown");
    	
    	assertEquals(2,person.size() );
    	
    }
    
    
  3.3  Added controller Test
    
        @Test
    public void shouldReturnPersonListBySurnameFromService() throws Exception {
         List<Person> personList = Arrays.asList(
                new Person("Mary", "Smith"),
                new Person("Brian", "Archer"),
                new Person("Collin", "Brown")
            );
        
        when(personDataService.findPersonBySurname(any())).thenReturn(personList);
        this.mockMvc.perform(get("/personBySurname/smith/"))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(jsonPath("$",hasSize(3)))
            .andExpect(jsonPath("$[0].id").exists())
            .andExpect(jsonPath("$[0].firstName").value("Mary"))
            .andExpect(jsonPath("$[0].lastName").value("Smith"))
            .andExpect(jsonPath("$[1].firstName").value("Brian"))
            .andExpect(jsonPath("$[1].lastName").value("Archer"))
            .andExpect(jsonPath("$[2].firstName").value("Collin"))
            .andExpect(jsonPath("$[2].lastName").value("Brown"));
    }
    
    
    @Test
    public void shouldReturnEmptyListBySurnameFromServiceWhenNotFound() throws Exception {
         List<Person> personList = Arrays.asList(
         
            );
        
        when(personDataService.findPersonBySurname(any())).thenReturn(personList);
        
        this.mockMvc.perform(get("/personBySurname/baskose/"))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(jsonPath("$",hasSize(0)))
            ;
    } 
    
    

### Exercise 4
Write a RESTful API endpoint to add a new value to the list
- pay attention to what should be returned when the record already exists
- prove your resutls

4.1 Created Add person return Response entity for returning person object and HttpStatus same time. if there is no same person previosly added then adds 
successfully and return HttpStatus ok.
If person which we try to add list is allready in list that time method returns HttpStatus.Conflict to show us there is an error addition.


  	public ResponseEntity<Person> addPerson(String lastName, String firstName) {
		Optional<Person> person = PERSON_DATA.stream()
				.filter(p -> p.getFirstName().equalsIgnoreCase(firstName) && p.getLastName().equalsIgnoreCase(lastName))
				.findAny();

		if (!person.isPresent()) {
			Person newPerson = new Person(firstName, lastName);
			PERSON_DATA.add(newPerson);
			return new ResponseEntity<Person>(newPerson, HttpStatus.OK);

		} else {
			return new ResponseEntity<Person>(person.get(), HttpStatus.CONFLICT);

		}
	}


4.2 Controller method added

    @PostMapping("/personAdd/{lastName}/{firstName}")
    public ResponseEntity<Person> personBySurname(@PathVariable(value="lastName") String lastName,
            @PathVariable(value="firstName") String firstName) {
        return personDataService.addPerson(lastName, firstName);
    }


4.3 Added Test 
    
    @Test
    public void shouldReturnStatusOkWhenNewPersonIsAdded()
    {
		ResponseEntity<Person> responseEntity =personDataService.addPerson("Baskose", "Cetin");
    	
    	assertEquals(HttpStatus.OK,responseEntity.getStatusCode() );
    	assertEquals("Cetin", responseEntity.getBody().getFirstName());
    	assertEquals("Baskose", responseEntity.getBody().getLastName());
    	
    }
    
    
    @Test
    public void shouldReturnStatusConflictWhenNewPersonAlreadyExists()
    {
		ResponseEntity<Person> responseEntity =personDataService.addPerson("Brown", "Collin");
    	
    	assertEquals(HttpStatus.CONFLICT,responseEntity.getStatusCode() );
    	assertEquals("Collin", responseEntity.getBody().getFirstName());
    	assertEquals("Brown", responseEntity.getBody().getLastName());
    	
    }





















